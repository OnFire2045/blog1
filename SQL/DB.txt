DB　SQL

// データベースとは検索や書き換え分析などのデータ管理を目的とする。
// リレーショナルデータベース(RDB：Relational Database)

// RDBの基本構造
・RDBには複数の表がはいっており、個々の表をテーブル(table)という。
・個々のテーブルには名前（テーブル名）が付いている。
・テーブルは列(column)と行(row)で構成される。
・１つの行が１件のデータに対応し、列はそのデータの要素に対応する。
※列のことをカラムやフィールドと呼ぶこともある。

図1-2 テーブルは列と行で構成されている

0101 菅原拓真   31 福岡県
0104 大江岳人   30 京都府
0108 立花いずみ 29 千葉県
0292 朝香あゆみ 24 北海道
0293 湊雄輔     22 千葉県

// データベース管理システム(DBMS)


// 代表的なRDBMS製品

// RDBMS(relational Database Management System)

分類 
Oracle Database オラクル社
DB2             IBM社
SQL Server      マイクロソフト社

OSS
MySQL           オラクル社
PostgreSQL      PostgreSQL Global Development Group
SQLite          D.Richard Hipp
H2 Database     Thomas Mueller


ANSI(American National Standards Insiture)
ISO(InternationalOrganization for Standardization)
で定められたSQLの標準構文

データベースにSQLを送るには
// リスト 1-1 はじめての検索
SELECT 出金額
FROM 家計簿

// テーブル名および列名
// データベースのテーブル名(例：家計簿)や列名（例：費目）の名付け方は、
会社やプロジェクトによってルールが定められていることがほとんどです。大抵は、
以下の３つの方法のいずれか（またはその短縮表記）が使われることが多い。

// いずれの方法にも長短がある。ネーミングルール。見た目のわかりやすさ。
// DBMSの動作保証の有無
// 


リスト 1-2 すべての列を検索する

SELECT 日付,費目,メモ,入金額,出金額
FROM 家計簿

// SELECTには目的とする列名。FROMには検索したいテーブル名を記述

リスト 1-3 すべての列を取得する(簡略気法)

SELECT *
FROM 家計簿

// 条件付きの検索 WHERE

リスト 1-4 出金額が3,000円を超える行だけを取得する

SELECT 日付,費目,出金額
FROM 家計簿
WHERE 出金額 > 3000

// この行を記述

リスト 1-4の結果

日付       費目　      出金額
2013-02-14 交際費      5000
2013-02-18 水道光熱費  7560

// WHERE 出金額が3000より多い行のみ取得できた

// データを追加

リスト 1-5 3月の支払いを業として挿入

INSERT INTO 家計簿
VALUES('2013-02-25','移住費','3月の家賃',0,85000)

// リスト 1-5を実行した後、全検索(SELECT * FROM 家計簿)を実行してみましょう。
// リスト 1-5の結果表のように、データが１行追加されて、６行に増えている

// INSERT INTO で追加先のテーブル　VALUESで追加するデータを指定している。

// データを更新

// リスト 1-6
UPDATE 家計簿
SET 出金額 = 90000
WHERE 日付 = '2013-02-25'

// SQLを実行後、「SELECT * FROM 家計簿」で全検索を実行


// データを削除してみよう

// リスト 1-7 日付が「2013年2月25日」である行の削除
DELETE FROM 家計簿
WHERE 日付 = '2013-02-25'

// 4つの文のうち、SELECT、UPDATE、DELETEで始まる分の動作を整理


// 3 命令の動作
SELECT文：ある条件を満たす行を探す-> 行の内容を取得
UPDATE文：その行の内容を書き換える
DELETE文：その行を削除する


// 1章のまとめ

// データベースの概要
・データベースは管理や分析を目的としてデータを蓄積したもの
・ITにおけるデータベースの実態は、通常、ファイルである
・データベースはデータベース管理システム(DBMS)によって管理される
・現在、さまざまなDBMSがソフトウェア製品として公開されている
・複数のテーブルの形式でデータを管理するものをリレーショナル・データベース
・テーブルには名前がついており、列と行から構成される

// SQLの概要
・SQLは、データベースやデータを操作するための専門言語である
・SQLで書かれた命令(SQL文)をDBMSに送信することで、データの検索、追加、更新、削除などを行うことができる
・SQLを送信するには、ドライバを用いたプログラムを新しく開発するか、既存の送信プログラムを利用する
・利用できるSQLの文法は利用するDBMS製品によって少しずつ異なるが基本的な部分は同じである。

// 練習問題
1-1
データベースはデータ分析や管理を目的として様々な情報を収集、蓄積したものですが、その実態は(A)ファイルです。これは、(B)DBMSと呼ばれるプログラムによって管理され、私はこれに(C)SQLを送信してデータを操作することができます。また、表形式でデータを管理するデータベースを特に(D)リレーショナルデータベースといい、表はデータの要素となる(E)列と、1つのデータに対応する(F)行から成り立ちます。

1-2
日常的に私たちが接するもので、実際にデータベースが使用されていると推測できるものを上げてください。また、そのデータベースに収集されている情報の主な対象を併記してください。

例)図書館の貸出システム　→ 本、CD、DVD

1-3
テーブル1-1(p030)の家計簿テーブルに対して、次のような操作をしたい場合、どのようなSQL文を記述すればよいか考え、実行してください。

1. 入金額が50,000円に等しい行を検索してすべての列を表示する。
2. 出金額が4,000円を超える行全てを削除する。
3. 2013年2月3日のメモを「カフェラテを購入」に変更する。

1.
SELECT *
FROM 家計簿
WHERE 入金額 = 50000

2.
SELECT *
FROM 家計簿
WHERE 出金額 > 4000

3.
UPDATE 家計簿 SET メモ = 'カフェラテを購入'
WHERE 日付 = '2013-02-03'


// 第2章　基本文法と4大命令

// 2.1 SQLの基本ルール

2.1.1 記述形式に関するルール

SQLに共通する基本ルール(1)
・文の途中に開業を入れることができる。
・行の先頭や行の途中に半角の空白を入れることができる。


// リスト 2-1 1行で記述されたSELECT文

SELECT 費目, 出金額 FROM 家計簿 WHERE 出金額 > 3000

// リスト 2-2 整形されたSELECT文
SELECT 費目, 出金額
FROM 家計簿
WHERE　出金額 > 3000


// 末尾のセミコロンで文の終了を表す

SELECT *
FROM 家計簿; // ここまででSELECT文終了
DELETE FROM 家計簿; // ここまででDELETE文終了

// コメントに関する2つのルール


// SQLに共通する基本ルール(2)
・ハイフン2つ(--)から行末まではコメントになり、無視される。
・/*から*/まではコメントになり、無視される。


// リスト2-3 コメントを記述したSQL
/* 入出金表示用 SQL バージョン0.1  作成者:朝香あさみ　作成日:2013-02-01 */
SELECT 入金額,出金額 --金額関連の列のみ表示
FROM 家計簿

2.1.3 予約後に関するルール
// 最後に、SQL文に記述できるごくについて、ルールを紹介しましょう

// SQLに居痛する基本ルール(3)
・SELECTやWHEREなどの命令に使う単語は、SQLとして特別な意味を持つ「予約語」である。
・予約語を記述する際は、大文字と小文字の区別はない。
・テーブル名や列名に予約語を利用することはできない。

SELECTやWHEREなどの一部の単語は、SQLの機能として特別な意味を持つため、列名などに使うことはできません。これを予約後(Keyword)といいます。

SQLの文中
「select * FROM 家計簿」でも「Select * froM 家計簿」でも動作する

// 2-2 データ型とリテラル

// リテラルの種類

// リスト 2-4 3月分の家賃支払いを業として挿入する(リスト 1-5の再掲)
INSERT INTO 家計簿
VALUE('2013-02-25', '移住費', '3月の家賃' . 0, 85000)

// SQL文の中に書き込まれたデータそのものをリテラルと言います。

// リテラルの記述に関するルール
・「'」でくくらず記述されたリテラル。数値情報として扱われる。
・「'」でくくられ、'2013-02-25'のような一定の形式で記述されたリテラルは、日付情報として扱われる。

// 列とデータ型

リスト 2-5 入金額と出金額を文字列情報として指定してしまった例
INSERT INTO 家計簿
VALUES('2013-02-25', '居住費', '3月の家賃', '0', '85000')S

// データ型(data type)を定めることになっています。

表2-1 代表的なデータ型
数値 整数値 INTEGER型
数値 少数   DECIMAL型、REAL型

文字列 固定長　CHAR型
文字列 可変長  VARCHAR型
日付と時刻     DATETIME型、DATE型、TIME型

// データ型
・テーブルの各列には、データ型が指定されている
・列には、データ型で指定された種類の情報しか格納することはできない
・利用可能なデータ型は、DBMS製品によって異なる

// VARCHAR型の指定には、最大長(最大桁数)が指定されます。同様の桁数指定は、
CHAR型やDECIMAL型(DBMS製品によってはNUMERIC型やREAL型)等でも可能

// 固定長と可変長

// 文字列型にはCHARとVARCHARがある。どう違うか？
// 予め用意した箱のサイズにあわせて中身を入れるか、箱の中身のサイズに合わせて用意するかの違いなの

// CHAR型はCHAR(10)と指定されている列では、あらかじめ10バイトの領域が確保。格納するデータは常に10バイト。文字列が10バイトに満たない場合は、文字列の右側に空白が追加され、10バイトぴったりに調整されて格納。
// VARCHAR型を指定された列は、格納する文字列の長さを勝手に調整する必要はない。
VARCHAR(10)と指定された列では、3バイトや7バイトの文字列が入力されるとそれに合わせた領域が確保される。


// 7文字の文字列情報 'SUKKIRI'
// NAME1 SUKKIRI□□□ CHAR(10)

// NAME2 SUKKIRI VACHAR(10)

// 3文字分が自動的に空白で埋められる10文字自分領域確保


// DBMSに依存しやすい日付の取扱
・日付リテラルとしてどのような記述を許すか
・日付に関するデータ型の名前、制度
・日付に関して利用できる命令（関数）種類

// SQLの命令体型

// 4つの重要なSQL文

// SELECT、UPDATE、DELETE、INSERT

// DML(Data Manipulation Language)

// SQLの言語体系 4大命令だけでほとんどの処理を実現可能

// 2.4 SELECT文-データの検索

// SELECT文の基本構文

// 最も頻繁に使われるSQLがSELECT文

// SELECT文の基本構文

//  SELECT 列名......
//  FROM   テーブル名
//  (WHERE装飾)
//  (その他の装飾)

// 2行目:FROM句といい、データを取得するテーブルを指定するために必ず指定します

// リスト 2-6 複数の列を取得する SELECT文

SELECT 費目, 入金額, 出金額
FROM 家計簿

リスト 2-6の結果表

費目 入金額 出金額
食費 0      380
給料 280000 0
教養娯楽費 0 2800
交際費 0 5000
水道光熱費 0 7500

// ASによる列名の定義

// SELECTにおける列名やテーブルの指定。AS+任意のワードで変更。定義

リスト 2-7 ASを用いて列名を定義したSELECT文
SELECT 費目 AS ITEM, 入金額 AS RECEIVE, 出金額 AS PAY
FROM 家計簿
WHERE 費目 = '給料'

リスト 2-7の結果表
ITEM RECIEVE PAY
給料 280000  0

// 別名をつけるメリット
・結果表に置ける列のタイトルを任意のものに変更できる
・わかりにくい列名や長い列名でも、わかりやすく短い列名を付けて利用することがで
きる

// SELECT・の濫用にご用心
// *による前列検索は便利だが、列が増えたりした場合結果が変化する。

// UPDATE文-データの更新

// UPDATE文の基本構文
// UPDATE文は、すでにテーブルに存在するデータを書き換えるための命令

UPDATE テーブル名
  SET 列名1 = 値1, 列名2 = 値2
  (WHERE 修飾)

// UPDATE直後には更新したいデータの存在するテーブル名を記述。SET句と言う

リスト 2-8 1つの列を更新するUPDATE文

UPDATE 家計簿
  SET  入金額 = 99999

リスト 2-8
// 全ての入金額が99999になる


// どの行を書き換えるべきかという指定がない


リスト 2-9 条件付きのUPDATE文

UPDATE 家計簿
  SET  入金額 = 99999
WHERE  日付   = '2013-02-03'

// WHEREのないUPDATE文は全件更新!
WHEREで対象業を指定しないと、UPDATE文はすべての行を書き換えてしまう

// DELETE文-データの削除

DELETE文の基本構文

// DELETE文は、既にテーブルに存在する行を削除するための命令です。
既存のデータに対する操作という点では、これまでに登場したSELECT文UPDATE文と同じ
ですが、行をまるごと削除する機能であるため、特定の列だけを指定するようなことは
できません。


// DELETE文の基本構文
DELETE // 削除しなさい
  FROM テーブル名
  (WHERE 修飾)

リスト 2-10 DELETE分の例
DELETE FROM 家計簿

// すべての行が削除対象になる

// WHEREなしのDELETE文は「データを全削除する：指示にほかならない

// WHEREのないDELETE命令は全件削除

■INSERT文-データの追加

// INSERT文の基本構文

// INSERT文はテーブルにデータを追加するための命令です。

■INSERT文の基本構文

INSERT INTO テーブル名 // このテーブルに
(列名1,列名2,列名3...) // この列に
VALUE(値1,値2,値3) // このデータを


// 1行目のINSERTには、INTOのキーワードを続けてデータを追加するテーブル名を記述

// 2行目はすべての列に追加する場合は省略可能

// 3行目はVALUE句といい、二行目に記述した列名に対応するテーブルを指定する必要
がある。


■ リスト 2-11 複数の列に追加する INSERT文
INSERT INTO 家計簿(費目, 日付, 出金額)
VALUES ('通信費', '2013-02-20', 6200)

// INSERT文の実行後に、テーブルを全件検索すると、次の実行表が得られる


リスト 2-11 実行後にテーブルを全件検索した結果表
2013-02-20 通信費  ...... ...... 6200

リスト 2-12 全列に追加するINSERT文
INSERT INTO 家計簿
VALUES('2013-02-20', '通信費', '携帯電話料金', 0, 6200)


■ 4つのSQLを学ぶコツ

// 4大命令を振り返って

// 本がないと混乱してしまうかもしれない

// FROM、WHERE、AS、INTO、VALUES

// 「四大命令をスッキリ学ぶコツ」

■ 四大命令をスッキリ学ぶ三つ残る
(1) 4大命令の構造と修飾語の全体像をしっかり把握する
(2) 4大命令の2通りの分類方法を理解する
(3) 4大命令に共通するテーブル指定を先に書く

■ 4大命令の2通りの分類を理解する

// 4大命令をいくつかの観点で分類すると、いろんな法則が見えてくる

// 4大命令の分類方法(1) 検索系と更新系
検索系:SELECT
更新系:UPDATE、DELETE、INSERT

// SQLの実行結果は表の形になる。実行結果は基本的に「成功か失敗か」であり、表な
どが返されることはない。

// ORDER BYで表の行を並び替える

// 4大命令の分類方法(2) 既存系と新規系

既存系:SELECT、UPDATE、DELETE
新規系:INSERT

// 対象行の絞り込み

■ テーブル指定を先に記述する

// WHERE句より前の部分について、より踏み込んで整理してみましょう。四つの命令に
共通するルールに気づく

// 4大命令の全てに共通すること
// 処理対象とするテーブル名を必ず指定する必要がある


// スッキリ書ける SQL
(1)まず、命令文(SELECTやINSET)を記述する
(2)次に、テーブル指定の部分を記述する
(3)テーブル指定より後ろの部分を記述する
(4)テーブル指定より前の部分を記述する(SELECT文のみ)


// 練習量 SQLを書いてみる

■ この章で学習した内容

// SQL基本ルール
・記述の途中で改行しても良い
・予約語は大文字、小文字が区別されない。また、列名などに利用できない。
・文中にコメントを記述することができる。

// データ型とリテラル
・SQL文の中に直接記述されるデータのことをリテラルという
・数値、文字列、日付など、データ型の種類に応じてリテラルの記述方法は異なる
・テーブルの各列にはデータ型が指定される
・テーブル指定より前の部分を記述する(SELECT文のみ)

// 2章のまとめ
// SQLの基本ルール
・記述の途中で開業しても良い
・予約語は大文字、小文字が区別されない。また列名などに利用できない。
・文中にコメントを記述する事ができる

// データ型とリテラル
・SQL文の中に直接記述されるデータのことをリテラルという
・数値、文字列、日付など、データの種類に応じてリテラルの記述方法は異なる
・テーブルの各列んはデータ型が指定されている
・列に指定された種類のデータのみ、その列に格納することができる

// SQLの体系
・SELECT、UPDATE、DELETE、INSERTの4つの命令を利用する
・命令形をどのように実行するかを支持する装飾が豊富に用意されており、
組み合わせることによって多様な命令を実現できる
・4つの命令は、操作内容から見た検索系と更新系、対象とするデータから見た既存系
と新規系に分類

// 4大命令をスッキリ学ぶコツ
・四大命令の構造と修飾語の全体像をしっかり把握する
・四大命令の二通りの分類方法を理解する
・四大命令に共通するテーブル指定を先に書く

まとめ
// 家計簿の内容を全て表示
SELECT* FROM 家計簿

// 2000円より大きな金額を使った日を知る
SELECT 日付 FROM 家計簿 WHERE 出金額 > 2000

// 3月1日 1800円で映画を見た記録を追加
INSERT INTO 家計簿
  VALUES ('2013-03-01', '娯楽費', '映画を見た' , 0, 1800)
  
// 3月1日の映画は1500円の誤りだったので修正したい
UPDATE 家計簿 SET 出金額 = 1500 WHERE 日付 = '2013-01-01'

// 全データを削除
DELETE FROM 家計簿

■ 練習問題
// 問題 2-1 SQLの予約語を記入
操作 検索,更新,削除,追加
命令 SELECT UPDATE DELETE INSERT
指定 FROM   なし   FROM   INTO
条件 WHERE  WHERE  WHERE

// 問題 2-2
(1) 30000(金額) (2)SQL入門(書籍名) (3)2013-02-20(日付)
(4) 1.41421356(少数) (5) 10時35分(時間) (6) 125,358,854(大きな数) (7)
102-0075(郵便番号)

// 問題 2-3
都道府県テーブル
列名        データ型      備考
コード      CHAR(2)       '01'~'47'の都道府県コード
地域        VARCHAR(10)   '関東'や'九州'など
都道府県名  VARCHAR(10)   '千葉'や'兵庫'など
県庁所在地  VARCHAR(20)   '千葉'や'神戸'など
面積        INTEGER       都道府県の面積(km2)

1.すべての列名を明示的に指定して、すべての行を取得する
2.列名の指定を省略して、1と同様の結果を取得する
3.「地域」 「都道府県名」の列について、「area」、「pref」といいう別名を付けて
すべての行を取得する

// 問題 2-4
都道府県テーブルについて、次のような3つのデータを追加するSQL文をそれぞれ作成し
て実行。2行目の追加に関してはSQL文中に列名を指定しない。空白は指定しない

コード 地域 都道府県名 県庁所在地 面積(km2)
26     近畿 京都                  4613
37     四国 香川       高松       1876
40          福岡       福岡

// 問題 2-5
問題2-4で追加された都道府県テーブル
1行目と3行目の空白部分について、それぞれ適切な値を格納するSQL文を作成。jikkou 
なお、コード26の行の県庁所在地は「京都」、コード40の行の地域は「九州」、
4,976(km2)とします

// 問題 2-6
問題 2-4で追加した1行目を都道府県テーブルから削除するSQL文を作成し、実行してく
ださい。その際、WHERE句にはコード番号を指定してください

■ 練習問題の解答
// 問題 2-1
(A)SELECT (B)UPDATE (C)DELETE (D)INSERT
(E)FROM   (F)FROM   (G)INTO   (H)WHERE

// 問題 2-2
(1)INTEGER型 (2)VARCHAR型 (3)DATE型
(4)DECIMAL型 (5)TIME型 (6)INTEGER型 (7)CHAR型

// 問題 2-3
// 1
SELECT コード, 地域, 都道府県名, 県庁所在地, 面積
FROM   都道府県

// 2
SELECT * 
FROM 都道府県

// 3
SELECT 地域 AS area,都道府県名 AS pref FROM 都道府県

// 問題 2-4
・コード26の行を追加する
INSERT INTO 都道府県(コード, 地域, 都道府県名, 面積)
VALUES('26, '近畿', '京都', 4613 )

・コード37の行を追加する
INSERT INTO 都道府県
VALUES('37', '四国', '香川', '高松', 1876 )

・コード40の行を追加する
INSERT INTO 都道府県（コード, 都道府県名, 県庁所在地)
VALUS('40', '福岡', '福岡')

// 問題 2-5
・1行目の空白に値を格納する
UPDATE 都道府県 SET 県庁所在地 = '京都'
WHERE コード = '26'

・3行目の空白に値を格納する
UPDATE 都道府県 SET 地域 = '九州', 面積 = 4976
WHERE コード = '40'

// 問題 2-6
DELETE FROM 都道府県 WHERE コード = '26'


■ 操作する行の絞り込み
// WHERE句の大切さ
3.1 WHERE句による絞り込み

// WHERE句 SELECTやDLETEの付属品ではない

// SQL言語としての特徴
・命令自体は単純で、最も少ない（使うのは主に4つ）
・しかし、様々な装飾語につけることで、複雑な処理が可能になる

// 私達はWHERE句を自由自在に使えて初めて、データを自由自在に操作することができ
るのです

■ WHERE句の基本
(1)処理対象行の絞り込みに用いる
=> WHEREを指定しないと「全ての行」が処理対象になる

(2)SELECT、UPDATE、DELETE文で使用可能
=> INSERT文では使用できない

(3)WHEREの後ろには条件式を記述する
=> 絞り込み条件に沿った「正しい条件式」を記述する

(1)と(2)については第2章で紹介しました。残る(3)については、
WHERE句の基本構文をしっかり抑えることが大切です。

// WHERE句の基本構文
WHERE 条件式

// 条件式
真と偽
条件式は結果が必ず真(True)か偽(False)になる式のこと

出金額 > 10000という式は出金額という列に格納されている値が10000未満の場合は式
の意味が正しいので真。10000以上の場合は式の意味が正しくないため偽と判定でき
る。

出金額 + 10000という式ではどうか

出金額 + 10000も 5000なら15000という数値になる

結果が数値や文字列、日付などになる式はWHERE句に記述することはできない

// WHERE句に書けるもの
// 結果が必ず真(True)、または偽(False)となる条件式

■ WHERE句のしくみ

// WHERE句を処理するDBMSの気持ちになればすぐわかる

リスト 3-1 1円以上の出金のあった行を全て削除するDELETE文

DELETE FROM 家計簿 WHERE 出金額 > 0

// DBMS内部の様子を示したもの

■ SQL
DELETE FROM 家計簿
WHERE 出金額 >0

日付       費目       メモ       入金額 出金額
2013-02-03 食費       コーヒー   0      380
2013-02-10 給料       給料1月文  280000 0
2013-02-11 教育娯楽費 書籍を購入 0      2800

図 3-1 WHERE句による条件式処理の仕組み

// 1行ずつ順番に、条件に合うかどうかをチェックするために「真か偽になる式」しか
書いちゃダメ

// WHERE句を含むSQL文を受け取ったDBMSは、テーブルの中のすべての行について条件
式が真になるかをそれぞれ調べる。真担った業についてのみ、SELECT、UPDATE、DELETE
処理を行う

// 様々な比較演算子

// 基本的な比較演算子
// 6種類

// =や<のような不等号の記号を含んだ式を比較演算子という。
記号の意味が正しければ真(True)。正しくなければ偽(False)に「化ける」
役割を持っている。本書ではSQLの実行によって演算子などが別の値に変化することを
「化ける」と表現する。

// 出金額 > 0 TRUE
// 出金額 = 0 FALSE

// = 左右の値が等しい,< 左辺は右辺よりも小さい,> 左辺は右辺よりも大きい,
   <= 左辺は右辺の値以下,>= 左辺は右辺の値以上,<> 左辺の値が等しくない

// NULLの判定

// 10やこんにちはのような具体的な値ではなくNULLという何も示さないことを意味す
ることになることがある。「NULLが格納されている」


// NULLとは
・そこに何も格納されていない。未定義
・数字のゼロや空白文字とは異なる


// 入金額が「０」の場合
・2月3日にコーヒー(食費)を購入。380円出勤し、0円入金した。
// 入金額が「NULL」の場合
・2月3日にコーヒー(食費)を購入。380円出金した。


// 列の値がNULLであることを判定するためにはIS NULL演算子。NULLではないことの判
定にはIS NOT NULL演算子を使う
SELECT *
FROM 家計簿
WHERE 出金額 NULL

// NULLの判定
・NULLであることを判定する
式 IS NULL
・NULLではないことを判定する
式 IS NOT NULL

リスト 3-2 正しいNULLの判定方法
SELECT *
FROM 家計簿
WHERE 出金額 IS NULL

// NULLは=で判定できない
// NULLは = や <> では判定できない。IS NULLやIS NOT NULLを使って条件式を作る


■ 比較演算子の=でNULLかどうかを判定してはいけない理由ー3 値理論

// 3 値理論と呼ばれる仕組みを採用している

(1) = や <> などの通常の比較演算子は、もともと値と値をひかくするためのもの。
よって。「値ではないNULL」を比較すると、不明な結果であるUNKNOWN。

(2) WHERE句による絞り込みは、条件式が真(TRUE)となる行だけが選ばれる。
条件式が偽(FALSE)やUNKNOWとなる行は処理対象にならない

■ LIKE演算子
// 文字列があるパターンに合致しているかをチェック。パターンマッチング。
// LIKE演算子を使う

// パターンマッチング
式 LIKE パターン文字越

■ 表 3-2
// %                 任意の0文字以上の文字列

// _(アンダースコア) 任意の一文字

リスト 3-3 1月に関連する行を取得するSELECT文
SELECT * FROM 家計簿
WHERE メモ LIKE '%1月%'

リスト 3-3の結果
2013-02-10 給料　1月 280000 0
2013-02-18 水道  1月 0      7560

// BETWEEN演算子

// 式 BEYWEEN 値1 AND 値2

// %や_を含む文字列をLIKEで探したい
/* 「100を含む文字列」という意味になる */
SELECT *
FROM 家計簿
WHERE メモ
LIKE '%100%'

// 文字列として%や_を使いたい場合、ESCAPE句を併用した記述を行う

SELECT *
FROM 家計簿
WHERE メモ
LIKE '%100$%'
ESCAPE '$'


// BETWEEN演算子
// 値が「値1以上かつ値2以下」の場合に真になる。
// 値や値2の場合も真になる点に注意してください。
// 100以上3000以下の範囲にある行のみを検索するには次のようなSQL文を記述しま
す

リスト 3-4 100 ~ 3000円の出費を取得するSELECT文
SELECT *
FROM 家計簿
WHERE 出金額 BETWEEN 100 AND 3000

// IN/ NOT IN演算子
  IN演算子は、値がカッコ内に列挙した複数の値のいずれかに合致するかを判定する演
  算子。=演算子では、1つの値との比較しかできませんが、IN演算子を使えば、沢山の
  値との比較が可能。

// IN演算子による複数値との比較
// 式 IN(値1, 値2, 値3...)

リスト 3-5 食費、交際費を取得するSELECT文
SELECT *
FROM 家計簿
WHERE 費目 IN('食費', '交際費')

// カッコ内の列挙した値のどれとも一致しないことを判定する。NOT IN 演算子を使
う

リスト 3-6 食費でも交際費でもない行を取得するSELECT文
SELECT *
FROM 家計簿
WHERE 費目 NOT IN ('食費', '交際費')

■ ANY / ALL演算子

// ANY演算子やALL演算子を利用することができます

// ANYやALLは、必ずその直前に比較演算子を付けて利用します。これにより、複数の
値との比較を一度に行うことができる。DBMSによっては、第2部で登場する「副問合
せ」でしかつかえないことがある。

■ ANY/ALL演算子による複数値との比較
・値リストのそれぞれと比較して、いずれかが真なら真
式 基本比較演算子 ANY(値1, 値2, 値3...)
・値リストのそれぞれと比較して、すべて真なら真
式 基本比較演算子 ALL (値1,値2, 値3...)
※基本比較演算子とは、「=」「<」「<>」など、3.3.1項の6つの演算子

// IN演算子の場合
・出金額が値リストの「どれか」と「一致」するなら真
出金額(3000) IN (1000,2000,3000) TRUE
                           ○
// ANY演算子の場合
・出金額が値リストの「どれか」より「小さい」なら真
出金額(2500) < ANY(1000,2000,3000) TRUE
                             ○
// ALL演算子の場合
・出金額が値リストの中の「すべて」より「小さい」なら真
出金額(1000) < ALL(1000,2000,3000) FALSE
                        ○   ○

// 式や副問合せなどの道具と組み合わせて真価を発揮する
・論理演算子
AND演算子、OR演算子

// AND演算子とOR演算子
・2つの条件式の療法が真の場合だけ、真となる(AかつB)
条件式1 AND 条件式2
・2つの条件式のどちらかが真ならば、真となる(AまたはB)
条件式1 OR 条件式2

湊くんの買い物リスト
// WHERE句を使って「名称がスッキリ勇者クエスト」かつ「販売店がB」という条件を
指定

リスト 3-7 2つの条件式を組み合わせたWHERE句
UPDATE    湊くんの買い物リスト
SET       価格 = 6200
WHERE     名称 = 'スッキリ勇者クエスト'
AND       販売店 = 'B'

// しょりないよう
名称 = 'スッキリ勇者クエスト' AND 販売店 = 'B'
    TRUE                          TRUE
                  TRUE
                UPDATEしよう
                販売店が「B」の行だけを指定できるね
// ANDとORは、両辺に条件式を必要とする演算子です。一方、右辺しか必要としない
NOT演算子も存在します。NOTを記述すると、右辺の条件式の結果は、真は偽に、偽は真
に逆転します。

// NOT演算子による真偽値の逆転
NOT 条件式

// WHERE NOT 販売店 = 'B' という記述で、
「販売店がB以外の行」を取り出すことができます。

// 論理演算子の優先度
論理演算子で条件式を組み合わせる際は、演算子が評価されるうう先順位に注意を払う
必要がある。複数の論理演算子が使われている場合では、(1)NOT、(2)AND、(3)ORの優
先順位に従って処理されていきます。ANDとORの優先順位については注意が必要です。

条件式1 OR 条件式2 AND 条件式3
↓
条件式1 OR 結果
↓
最終結果

// ANDとORの優先順位
// 「販売店AかBで打っている、ゲームかDVD」を検索したいために、
リスト 3-8を実行すると、意図に反して2行目以外のすべての行が反されてしまいま
す。

リスト 3-8 複数の論理演算子を使ったSELECT文
SELECT * FROM 湊くんの買い物リスト
WHERE 販売店 = 'A' /* 条件式 */
OR    販売店 = 'B' /* 条件式2 */
AND カテゴリー = 'ゲーム' /* 条件式3 */
OR カテゴリー = 'DVD' /* 条件式4 */

// ORよりもANDの優先順位が低い、DBMSがまず条件式2と3を先に評価し、その結果と条
件式1と4をORで評価してしまったからです。条件式にカッコを付けることでその評価の
優先順位を引き上げることができる。

リスト 3-9 複数の論理演算子を使ったSELECT文(条件式にカッコを付ける)
SELECT * FROM 湊くんの買い物リスト
WHERE( 販売店 = 'A' /* 条件式1 */
OR 販売店 = 'B') /* 条件式2 */
AND ( カテゴリ = 'ゲーム' /* 条件式3 */
OR カテゴリ = 'DVD') /* 条件式4 */

リスト 3-9の結果表

// DBMSは、カッコでくぐられた条件式1と2,3と4をそれぞれORで処理し、
最後にその結果をANDで評価します。これで目的通り、上の結果表のように
「販売店AかBで売っているゲームかDVD」の行を得ることができます

■ 括弧による優先順位の引き上げ
情家円式をカッコでくぐると、評価の優先順位が引きあがる

■ 主キーとその必要性
// 思い通りに削除できない!?

テーブル   チョコレートの購入が同じ日に2回ある家計簿
日付       費目       メモ               入金額 出金額
2013-03-03 食費       チョコレートを購入 0      105
2013-03-03 食費       チョコレートを購入 0      105
2013-03-06 教養娯楽費 月刊SQLを購入      0      1280

// このテーブルには、3月3日にチョコレートの購入記録が2件
// テーブルの1行目だけを削除する方法を考えてみましょう。
// しかし、DELETE文を書こうとすると、湊くんのようにWHERE句のところで
// 手が止まってしまうはずです。たとえば「DELETE FROM 家計簿 WHERE
// 日付 = '2013-02-03' AND 出金額 = 105」 としても、1行目と2行目の両方が削除さ
れてしまう。

// WHEREで「上の行を」って指定したいだけなのよね

// 行を区別できないということは、ある特定の行だけを指定して操作することができない

// 「上の行」「下の行」などと記述することができますが、データとしてはこの2つの
行は全く同じものであり、区別する手段がありません。行を区別できないということ
は、ある特定の行だけを指定して操作することができないことを意味します。

// 重複した行がもたらす問題
完全に重複した行が存在すると、そのうちある行だけを区別、識別することはできな
い。よって、ある行だけを操作することもできない

// テーブルの中に重複されたことは避けるべきとされています

■ 特定の行を識別する方法
// 行が重複しないテーブルなら問題ない

// 社員テーブル
社員番号 年齢 性別 名前
2003031  45   1    ヨシダ シゲル
2003032  45   1    ヨシダ シゲル
2005011  31   1    スガワラ タクマ
2012001  22   1    ミナト ユウスケ
2012002  24   2    アサカ アユミ

リスト 3-10 上のヨシダシゲルさんだけを削除する

DELETE FROM 社員
WHERE 社員番号 = '2003031' /* 社員番号で対象業を特定 */

// 「社員番号」が備える特殊な性質
・社員番号を持たない社員は存在しない
・同じ社員番号が、異なる社員に割り振られることはない。

ということは......「社員テーブルで行が重複することはありえない」のね!

・社員テーブルに置ける社員番号 「この値を指定することで、ある1行を完全に特定で
きる」という役割を担う列のことを、特に主キーといいます。主キー(Primary key)

// 主キーとなる列が持つべき特性
・必ず何らかのデータが格納される(NULLではない)
・ほかの行と値が重複しない

// WHEREを特定できるためにも、全てのテーブルは主キーとなるような列を必ず持つべ
き

■ 主キー列を作り出す
・自然キー(natural key)と呼ばれます
・主キーのための列を無理やり作ってしまう

リスト 3-10　上のヨシダシゲルさんだけを削除する
DELETE FROM 社員
WHERE 社員番号 = '2003031' */ 社員番号で対象業を特定 */

// 「社員番号」

■ 「社員番号」が備える特殊な性質
・社員番号を持たない社員は存在しない
・同じ社員番号が、異なる社員に割り振られることはない

// 「社員テーブルで行が重複することはありえない」
・「この値を指定することで、ある1行を完全に特定できる」
・主キー(primary key)といいます。

■ 主キーとなる列が持つべき特性
・必ず何らかのデータが格納される(NULLではない)
・他の行と値が重複しない

// データベースで情報を管理する場合、ある特定の行を索状したり更新したりは頻繁
に発生します。WHERE句で特定できるためにも、全てのテーブルは主キーとなるような
列を必ず持つべきなのです。

■ 主キー列を作り出す
// 自然キー(natural key)。主キーのための列を無理やり作ってしまう。
// 家計簿テーブルの場合、「1回の入出金行為」それぞえに連番で番号を振る。
// 「入出金ID」のような列として管理する

// 入出金ID:102 入出金ID:103 入出金ID:104
// 出金¥105     出金¥105     入金 ¥250000

// 図 3-6 それぞれの入出金行為ごとに番号を振って、管理する

// 「入出金ID」列のように、管理目的のためだけに人為的に追加された列を、自然
キーに対して人工キー(artificial key)や代替キー(surrogate key)といいます

// 複数の列で行を識別する
・「内容が重複する可能性がある列」は主キーとして利用することはできません
・数を組み合わせれば重複する可能性が実質的になくなる
・氏名、住所、生年月日の3つの列を組み合わせ、このように複数の列を1つの主キーと
して扱うものを複合主キー(compound key)といいます

// 各列、単独では重複する可能性があり「主キー」の役割を果たせない

// これら3つの列で１つの主キーを構成（複合主キー）

// 複数列を組み合わせれば、実質的に重複しない

■ 時刻情報を含む日付の判定
DATE型を条件式に用いる場合は、時刻情報について注意が必要。
たとえば、2013年3月以前のデータを抽出するために。「日付 <= '2013-03-31'」
とした場合、時刻を指定していないため、DBMS製品によっては[2013-03-31 00:00:00」
と解釈する可能性があります。その結果、「2013-03-31 10:30:00」等のデータは条件
に合致せず、正しい結果を得ることができまえん。落とし穴を回避するために、翌日よ
り過去という条件（「日付 < '2013-04-01'」を指定します。DATE型には時刻情報が含
まれないように記述します。

■ 3.6 この章のまとめ

// この章で学習した内容
WHERE句
・WHERE句に記述した条件式によって、対象データを絞り込むことができる
・WHERE句は、SELECT、UPDATE、DELETE文で使うことができる

演算子
・条件式にはさまざまな演算子を記述できる
比較演算子 : =, <. >, <=, <=, <>, IS NULL, LIKE, BETWEEN, IN, ANY, ALL
論理演算子 :AND,OR,NOT

・論理演算子は、NOT、AND、ORの順で優先度が高く、先に評価される

NULL
・データが格納されておらず、未定義の状態を「NULLが格納されている」と表現
・NULLを判定するための条件式では、IS NULLとIS NOT NULLを使用する。
「= NULL」では正しく判定できない。

主キー
・主キーによって、テーブル内の１つひとつのデータが識別可能になる
・主キーとなる列には、重複しない値が必ず格納される必要がある
・自然キーが存在しない場合、人工キーを追加して識別可能にする
・複数の列を組み合わせて複合主キーを構成し行を識別するために用いる

// この章でできるようになったこと

SELECT *
FROM 家計簿
WHERE 日付 = '2013-03-01'
AND 費目 = '食費'

SELECT *
FROM 家計簿
WHERE 出金額 IS NULL

SELECT *
FROM 家計簿
WHERE メモ LIKE '%購入 %' AND 出金額 > 0

// 3.6.2 この章でできるようになったこと
// 3月1日に使った食費を知りたい
SELECT *
FROM 家計簿
WHERE 日付 = '2013-03-01 AND 費目 = '食費'

// 支出に関係のない行を取り出したい
SELECT *
FROM 家計簿
WHERE 出金額 IS NULL

// メモに「購入」を含む支払いを調べたい
SELECT *
FROM 家計簿
WHERE メモ LIKE '%購入%' AND 出金額 > 0

// 居住費(家賃、電気代、水道代の総称)に係る支払を調べたい
SELECT *
FROM 家計簿
WHERE 費目 IN('家賃', '電気代', '水道代')

// 3月の行だけを取り出したい
SELECT *
FROM 家計簿
WHERE 日付 BETWEEN '2013-03-01'
AND '2013-03-31'

■ 練習問題
// 問題 3-1
ある年の一年間の毎月の気象データを記録した気象観測テーブルがあります

気象観測テーブルの定義
列名     データ型 備考
月       INTEGER  1~12のいずれかの値
降水量   INTEGER  観測データがない場合はNULL
最高気温 INTEGER  観測データがない場合はNULL
最低気温 INTEGER  観測データがない場合はNULL
温度     INTEGER  観測データがない場合はNULL

このテーブルについて次のデータを取得するSQL文を作成し、実行してください

1.6月のデータ
2.6月以外のデータ
3.降水量が100未満のデータ
4.降水量が200より多いデータ
5.最高気温が30以上のデータ
6.最低気温が0以下のデータ
7.3月,5月,7月のデータ
8.3月,5月7月以外のデータ
9.降水量が100以下で、湿度が50より低いデータ
10.最低気温が5未満か、最高気温が35より高いデータ
11.湿度が60~79の範囲にあるデータ
12.観測データのない列のある月のデータ
※7,8,11については2種類のSQL文を作成してください

// 問題 3-2
// 問題 2-3で用いた都道府県てーぶるについて、次のデータを取得するSQL文を作成し
実行してください

1.都道府県名が「川」で終わる都道府県名
2.都道府県名に「島」が含まれる都道府県名
3.都道府県名が「愛」で始まる都道府県名
4.都道府県名と県庁所在地が一致するデータ
5.都道府県名と県庁所在地が一致しないデータ

// 問題 3-3
各科目の試験成績を登録する成績表テーブルがあります
このテーブルについて、以下の1~6の設問で支持された動作をするSQL文を作成し、実行
してください

// 成績表テーブル定義

列名     データ型    備考
学籍番号 CHAR(4)     学生の学籍番号
学生名   VARCHAR(20) 学生の名前
法学     INTEGER     法学の点数
経済学   INTEGER     経済学の点数
哲学     INTEGER     哲学の点数
情報理論 INTEGER     情報理論の点数
外国語   INTEGER     外国語の点数
総合成績 CHAR(1)     総合評価

1.登録されている全データ取得、テーブル内容確認。
2.次ページの表にある学生と科目を追加する
学籍番号　学生名　法学　経済学　哲学　情報理論　外国語　総合成績
S001 織田信長 77 55 80 75 93　(NULL)
A002 豊臣秀吉 64 69 70 0  59  (NULL)
E003 徳川家康 80 83 85 90 79  (NULL)

3.2.で登録した学籍番号S001の学生の法学を85。哲学を67に修正する
4.2.で登録した学生番号A002の学生と学籍番号E003の学生の外国語を81に修正する
5.次のルールで総合成績を更新する(4つのルールごとにSQL文を作成する)。
(1)全科目が80以上の学生は「A]とする。
(2)法学、外国語のどちらかが80以上で、経済学、哲学のどちらかが80以上の学生は
「B」とする。
(3)全科目が50未満の学生は「D」とする。
(4)それ以外の学生を「C」とする。
6.いずれかの科目が0がある学生を、成績表テーブルから削除する。

// 問題 3-4
// 問題 3-1の気象観測テーブル、問題 3-2の都道府県テーブル、問題 3-3の成績表
テーブルについて、主キーにふさわしい列名をそれぞれ回答してください。
1.気象観測テーブル()
2.都道府県テーブル()
3.成績表テーブル()


3章の練習問題
// 問題 3-1の解答
別名        データ型     備考
月         INTEGER    1 ~ 12のいずれかの値
降水量      INTEGER    観測データがない場合は NULL
最高気温    INTEGER     観測データがない場合は NULL
最低気温    INTEGER    観測データがない場合は NULL
湿度       INTEGER    観測データがない場合は NULL

// 問題 3-1
このテーブルについて、次のデータを取得するSQL文を作成し、実行してください
1.6月のデータ
2.6月以外のデータ
3.降水量が100未満のデータ
4.降水量が200より多いデータ
5.最高気温が30以上のデータ
6.最低気温が0以下のデータ
7.3、５，７月のデータ
8.３，５，７月以外のデータ
9.降水量 100以下で温度が50より低いデータ
10.最低気温 5未満か、最高気温が35より高い
11.湿度が60~79の範囲にあるデータ
12/観測データのない列のある月のデータ
※ 7,8,11については２種類のSQL文を作成してください


// 問題3-2
問題2-3で用いた都道府県テーブルについて次のデータ取得するSQL文作成。
1.都道府県名が「川」で終わる
2.都道府県名に「島」が含まれる
3.都道府県名が「愛」で始まる
4.都道府県名と県庁所在地 一致
5.都道府県名と県庁所在地 一致しない

// 練習3-3 悪科目の試験成績を登録する成績表テーブル
各科目の試験成績を登録する成績表テーブル
以下の1~6の設問で支持された動作をするSQL文を作成、実行。

成績表テーブルの定義

列名        データ型    備考
学籍番号    CHAR(4)     学生の学籍番号
学生名      CARCHAR(20) 学生の名前
法学        INTEGER     法学の点数
経済学      INTEGER     経済学の点数
哲学        INTEGER     哲学の点数
情報論理    INTEGER     情報理論の点数
外国語      INTEGER     外国語の点数
総合成績    CHAR(1)     総合評価

1.登録されている全データを取得しテーブル内容確認
2.次ページの平にある学生と項目を追加
3.登録した学籍番号 S001の学生の法学を85　哲学を67に修正
4.登録したA002の学生の学籍番号 E003の学籍の外国語を81に集積
5.次のルールで総合成績更新
(1)全科目が80以上の学生は「A」
(2)法学、外国語どちらかが80以上で、経済学、哲学のどちらかが80以上
の学生は「B」
(3)全科目が５０未満の学生は「D」
(4)それ以外の学生を「C」
6.いずれかの科目に０がある学生を、成績表テーブルから削除

// 問題 3-4
問題 3-1の気象観測テーブル、問題 3-2の都道府県テーブル、3-3の成績表テーブルについて、主キーにふさわしい列名をそれぞれ回答

1.気象観測テーブル
2.都道府県テーブル
3.成績表テーブル


問題 3-1
SELECT * FROM 気象観測 WHERE 月 =  6        --1
SELECT * FROM 気象観測 WHERE 月 <> 6        --2
SELECT * FROM 気象観測 WHERE 降水量 < 100   --3
SELECT * FROM 気象観測 WHERE 降水量 > 200   --4
SELECT * FROM 気象観測 WHERE 最高気温 >= 30 --5
SELECT * FROM 気象観測 WHERE 最低気温 <= 0  --6

/* INを使う場合 */
    SELECT * FROM 気象観測 WHERE 月 IN ( 3, 5, 7) --7
    
/* ORを使う場合 */
SELECT * FROM 気象観測
  WHERE 月 = 3 OR 月 = 5 OR 月 = 7
  
/* NOT INを使う場合 */                            --8
SELECT * FROM 気象観測 WHERE 月 NOT IN(3,  5,  7)

/* ANDを使う場合 */                               --8
SELECT * FROM 気象観測
  WHERE 月 <> 3 AND 月 <> 5 AND 月 <> 7

SELECT * FROM 気象観測
  WHERE 降水量 <= 100 AND 湿度 < 50               --9
  
SELECT * FROM 気象観測
  WHERE 最低気温 C5 OR 最高気温 > 35              --10

/* BETWEENを使う場合 */                           --11
SELECT * FROM 気象観測
  WHERE 湿度 BETWEEN 60 AND 79

  /* ANDを使う場合 */                             --11
SELECT * FROM 気象観測
  WHERE 湿度 >= 60 AND 湿度 <= 79

SELECT * FROM 気象観測
  WHERE 降水量 IS NULL OR 最高気温 IS NULL        --12
    OR 最低気温 IS NULL OR 湿度 IS NULL


// 問題 3-2
SELECT  都道府県名 FROM 都道府県 --1
WHERE 都道府県名 LIKE '%川'

SELECT 都道府県名 FROM 都道府県 --2
WHERE  都道府県名 LIKE '%島%'

SELECT 都道府県名 FROM 都道府県 --3
WHERE  都道府県名 LIKE '愛%'

SELECT * FROM 都道府県          --4
WHERE 都道府県名 = 県庁所在地


SELECT * FROM 都道府県          --5
WHERE 都道府県名 <> 県庁所在地

// 問題 3-3
SELECT * FROM 成績表            --1

/* 学籍番号S001の学生 */
INSERT INTO 成績表
VALUES ('S001', '織田　信長', 77, 55, 80, 75, 93, NULL);

/* 学籍番号A002'の学生 */
INSERT INTO 成績表
VALUES ('A002', '豊臣 秀吉', 64, 69, 70, 0, 59,NULL);

/* 学籍番号E003の学生 */
INSERT INTO 成績ヒョ
VALUES('E003'. '徳川 家康', 80, 83, 85, 90, 79, NULL); --2

UPDATE 成績表 SET 法学 = 85, 哲学 = 67          --3
WHERE 学籍番号 = 'S001'

UPDATE 成績表 SET 外国語 = 81
WHERE  学籍番号 IN ('A002' , 'E003')

5.
(1)
UPDATE  成績表  SET  総合成績 = 'A'
  WHERE  法学 >= 80 AND 経済学 >= 80 AND 哲学 >= 80
  AND 情報理論 >= 80 AND 外国語 >= 80

(2)
UPDATE成績表 SET 総合成績 = 'B' 
  WHERE  ( 法学 >= 80 OR 外国語 >= 80)
  AND    ( 経済学 >= 80 OR 哲学 >= 80)
  AND 総合成績 IS NULL
  
(3)
UPDATE 成績表 SET 総合成績 = 'D'
  WHERE 法学 < 50 AND 経済学 < 50 AND 哲学 < 50
  AND 情報理論 < 50 AND 外国語 < 50
  AND 総合成績 IS NULL

(4)UPDATE 成績表 SET 総合成績 = 'C'
  WHERE 総合成績 IS NULL

DELETE FROM 成績表
  WHERE 法学 = 0
     OR 経済学 = 0
     OR 哲学 = 0
     OR 情報理論 = 0
     OR 外国語 = 0

// 3-4
1.気象観測テーブル 月
2.都道府県テーブル コード
3.成績表テーブル   学籍番号
