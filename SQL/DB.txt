DB　SQL

// データベースとは検索や書き換え分析などのデータ管理を目的とする。
// リレーショナルデータベース(RDB：Relational Database)

// RDBの基本構造
・RDBには複数の表がはいっており、個々の表をテーブル(table)という。
・個々のテーブルには名前（テーブル名）が付いている。
・テーブルは列(column)と行(row)で構成される。
・１つの行が１件のデータに対応し、列はそのデータの要素に対応する。
※列のことをカラムやフィールドと呼ぶこともある。

図1-2 テーブルは列と行で構成されている

0101 菅原拓真   31 福岡県
0104 大江岳人   30 京都府
0108 立花いずみ 29 千葉県
0292 朝香あゆみ 24 北海道
0293 湊雄輔     22 千葉県

// データベース管理システム(DBMS)


// 代表的なRDBMS製品

// RDBMS(relational Database Management System)

分類 
Oracle Database オラクル社
DB2             IBM社
SQL Server      マイクロソフト社

OSS
MySQL           オラクル社
PostgreSQL      PostgreSQL Global Development Group
SQLite          D.Richard Hipp
H2 Database     Thomas Mueller


ANSI(American National Standards Insiture)
ISO(InternationalOrganization for Standardization)
で定められたSQLの標準構文

データベースにSQLを送るには
// リスト 1-1 はじめての検索
SELECT 出金額
FROM 家計簿

// テーブル名および列名
// データベースのテーブル名(例：家計簿)や列名（例：費目）の名付け方は、
会社やプロジェクトによってルールが定められていることがほとんどです。大抵は、
以下の３つの方法のいずれか（またはその短縮表記）が使われることが多い。

// いずれの方法にも長短がある。ネーミングルール。見た目のわかりやすさ。
// DBMSの動作保証の有無
// 


リスト 1-2 すべての列を検索する

SELECT 日付,費目,メモ,入金額,出金額
FROM 家計簿

// SELECTには目的とする列名。FROMには検索したいテーブル名を記述

リスト 1-3 すべての列を取得する(簡略気法)

SELECT *
FROM 家計簿

// 条件付きの検索 WHERE

リスト 1-4 出金額が3,000円を超える行だけを取得する

SELECT 日付,費目,出金額
FROM 家計簿
WHERE 出金額 > 3000

// この行を記述

リスト 1-4の結果

日付       費目　      出金額
2013-02-14 交際費      5000
2013-02-18 水道光熱費  7560

// WHERE 出金額が3000より多い行のみ取得できた

// データを追加

リスト 1-5 3月の支払いを業として挿入

INSERT INTO 家計簿
VALUES('2013-02-25','移住費','3月の家賃',0,85000)

// リスト 1-5を実行した後、全検索(SELECT * FROM 家計簿)を実行してみましょう。
// リスト 1-5の結果表のように、データが１行追加されて、６行に増えている

// INSERT INTO で追加先のテーブル　VALUESで追加するデータを指定している。

// データを更新

// リスト 1-6
UPDATE 家計簿
SET 出金額 = 90000
WHERE 日付 = '2013-02-25'

// SQLを実行後、「SELECT * FROM 家計簿」で全検索を実行


// データを削除してみよう

// リスト 1-7 日付が「2013年2月25日」である行の削除
DELETE FROM 家計簿
WHERE 日付 = '2013-02-25'

// 4つの文のうち、SELECT、UPDATE、DELETEで始まる分の動作を整理


// 3 命令の動作
SELECT文：ある条件を満たす行を探す-> 行の内容を取得
UPDATE文：その行の内容を書き換える
DELETE文：その行を削除する


// 1章のまとめ

// データベースの概要
・データベースは管理や分析を目的としてデータを蓄積したもの
・ITにおけるデータベースの実態は、通常、ファイルである
・データベースはデータベース管理システム(DBMS)によって管理される
・現在、さまざまなDBMSがソフトウェア製品として公開されている
・複数のテーブルの形式でデータを管理するものをリレーショナル・データベース
・テーブルには名前がついており、列と行から構成される

// SQLの概要
・SQLは、データベースやデータを操作するための専門言語である
・SQLで書かれた命令(SQL文)をDBMSに送信することで、データの検索、追加、更新、削除などを行うことができる
・SQLを送信するには、ドライバを用いたプログラムを新しく開発するか、既存の送信プログラムを利用する
・利用できるSQLの文法は利用するDBMS製品によって少しずつ異なるが基本的な部分は同じである。

// 練習問題
1-1
データベースはデータ分析や管理を目的として様々な情報を収集、蓄積したものですが、その実態は(A)ファイルです。これは、(B)DBMSと呼ばれるプログラムによって管理され、私はこれに(C)SQLを送信してデータを操作することができます。また、表形式でデータを管理するデータベースを特に(D)リレーショナルデータベースといい、表はデータの要素となる(E)列と、1つのデータに対応する(F)行から成り立ちます。

1-2
日常的に私たちが接するもので、実際にデータベースが使用されていると推測できるものを上げてください。また、そのデータベースに収集されている情報の主な対象を併記してください。

例)図書館の貸出システム　→ 本、CD、DVD

1-3
テーブル1-1(p030)の家計簿テーブルに対して、次のような操作をしたい場合、どのようなSQL文を記述すればよいか考え、実行してください。

1. 入金額が50,000円に等しい行を検索してすべての列を表示する。
2. 出金額が4,000円を超える行全てを削除する。
3. 2013年2月3日のメモを「カフェラテを購入」に変更する。

1.
SELECT *
FROM 家計簿
WHERE 入金額 = 50000

2.
SELECT *
FROM 家計簿
WHERE 出金額 > 4000

3.
UPDATE 家計簿 SET メモ = 'カフェラテを購入'
WHERE 日付 = '2013-02-03'


// 第2章　基本文法と4大命令

// 2.1 SQLの基本ルール

2.1.1 記述形式に関するルール

SQLに共通する基本ルール(1)
・文の途中に開業を入れることができる。
・行の先頭や行の途中に半角の空白を入れることができる。


// リスト 2-1 1行で記述されたSELECT文

SELECT 費目, 出金額 FROM 家計簿 WHERE 出金額 > 3000

// リスト 2-2 整形されたSELECT文
SELECT 費目, 出金額
FROM 家計簿
WHERE　出金額 > 3000


// 末尾のセミコロンで文の終了を表す

SELECT *
FROM 家計簿; // ここまででSELECT文終了
DELETE FROM 家計簿; // ここまででDELETE文終了

// コメントに関する2つのルール


// SQLに共通する基本ルール(2)
・ハイフン2つ(--)から行末まではコメントになり、無視される。
・/*から*/まではコメントになり、無視される。


// リスト2-3 コメントを記述したSQL
/* 入出金表示用 SQL バージョン0.1  作成者:朝香あさみ　作成日:2013-02-01 */
SELECT 入金額,出金額 --金額関連の列のみ表示
FROM 家計簿

2.1.3 予約後に関するルール
// 最後に、SQL文に記述できるごくについて、ルールを紹介しましょう

// SQLに居痛する基本ルール(3)
・SELECTやWHEREなどの命令に使う単語は、SQLとして特別な意味を持つ「予約語」である。
・予約語を記述する際は、大文字と小文字の区別はない。
・テーブル名や列名に予約語を利用することはできない。

SELECTやWHEREなどの一部の単語は、SQLの機能として特別な意味を持つため、列名などに使うことはできません。これを予約後(Keyword)といいます。

SQLの文中
「select * FROM 家計簿」でも「Select * froM 家計簿」でも動作する

// 2-2 データ型とリテラル

// リテラルの種類

// リスト 2-4 3月分の家賃支払いを業として挿入する(リスト 1-5の再掲)
INSERT INTO 家計簿
VALUE('2013-02-25', '移住費', '3月の家賃' . 0, 85000)

// SQL文の中に書き込まれたデータそのものをリテラルと言います。

// リテラルの記述に関するルール
・「'」でくくらず記述されたリテラル。数値情報として扱われる。
・「'」でくくられ、'2013-02-25'のような一定の形式で記述されたリテラルは、日付情報として扱われる。

// 列とデータ型

リスト 2-5 入金額と出金額を文字列情報として指定してしまった例
INSERT INTO 家計簿
VALUES('2013-02-25', '居住費', '3月の家賃', '0', '85000')S

// データ型(data type)を定めることになっています。

表2-1 代表的なデータ型
数値 整数値 INTEGER型
数値 少数   DECIMAL型、REAL型

文字列 固定長　CHAR型
文字列 可変長  VARCHAR型
日付と時刻     DATETIME型、DATE型、TIME型

// データ型
・テーブルの各列には、データ型が指定されている
・列には、データ型で指定された種類の情報しか格納することはできない
・利用可能なデータ型は、DBMS製品によって異なる

// VARCHAR型の指定には、最大長(最大桁数)が指定されます。同様の桁数指定は、
CHAR型やDECIMAL型(DBMS製品によってはNUMERIC型やREAL型)等でも可能

// 固定長と可変長

// 文字列型にはCHARとVARCHARがある。どう違うか？
// 予め用意した箱のサイズにあわせて中身を入れるか、箱の中身のサイズに合わせて用意するかの違いなの

// CHAR型はCHAR(10)と指定されている列では、あらかじめ10バイトの領域が確保。格納するデータは常に10バイト。文字列が10バイトに満たない場合は、文字列の右側に空白が追加され、10バイトぴったりに調整されて格納。
// VARCHAR型を指定された列は、格納する文字列の長さを勝手に調整する必要はない。
VARCHAR(10)と指定された列では、3バイトや7バイトの文字列が入力されるとそれに合わせた領域が確保される。


// 7文字の文字列情報 'SUKKIRI'
// NAME1 SUKKIRI□□□ CHAR(10)

// NAME2 SUKKIRI VACHAR(10)

// 3文字分が自動的に空白で埋められる10文字自分領域確保


// DBMSに依存しやすい日付の取扱
・日付リテラルとしてどのような記述を許すか
・日付に関するデータ型の名前、制度
・日付に関して利用できる命令（関数）種類

// SQLの命令体型

// 4つの重要なSQL文

// SELECT、UPDATE、DELETE、INSERT

// DML(Data Manipulation Language)

// SQLの言語体系 4大命令だけでほとんどの処理を実現可能

// 2.4 SELECT文-データの検索

// SELECT文の基本構文

// 最も頻繁に使われるSQLがSELECT文

// SELECT文の基本構文

//  SELECT 列名......
//  FROM   テーブル名
//  (WHERE装飾)
//  (その他の装飾)

// 2行目:FROM句といい、データを取得するテーブルを指定するために必ず指定します

// リスト 2-6 複数の列を取得する SELECT文

SELECT 費目, 入金額, 出金額
FROM 家計簿

リスト 2-6の結果表

費目 入金額 出金額
食費 0      380
給料 280000 0
教養娯楽費 0 2800
交際費 0 5000
水道光熱費 0 7500

// ASによる列名の定義

// SELECTにおける列名やテーブルの指定。AS+任意のワードで変更。定義

リスト 2-7 ASを用いて列名を定義したSELECT文
SELECT 費目 AS ITEM, 入金額 AS RECEIVE, 出金額 AS PAY
FROM 家計簿
WHERE 費目 = '給料'

リスト 2-7の結果表
ITEM RECIEVE PAY
給料 280000  0

// 別名をつけるメリット
・結果表に置ける列のタイトルを任意のものに変更できる
・わかりにくい列名や長い列名でも、わかりやすく短い列名を付けて利用することがで
きる

// SELECT・の濫用にご用心
// *による前列検索は便利だが、列が増えたりした場合結果が変化する。

// UPDATE文-データの更新

// UPDATE文の基本構文
// UPDATE文は、すでにテーブルに存在するデータを書き換えるための命令

UPDATE テーブル名
  SET 列名1 = 値1, 列名2 = 値2
  (WHERE 修飾)

// UPDATE直後には更新したいデータの存在するテーブル名を記述。SET句と言う

リスト 2-8 1つの列を更新するUPDATE文

UPDATE 家計簿
  SET  入金額 = 99999

リスト 2-8
// 全ての入金額が99999になる


// どの行を書き換えるべきかという指定がない


リスト 2-9 条件付きのUPDATE文

UPDATE 家計簿
  SET  入金額 = 99999
WHERE  日付   = '2013-02-03'

// WHEREのないUPDATE文は全件更新!
WHEREで対象業を指定しないと、UPDATE文はすべての行を書き換えてしまう

// DELETE文-データの削除

DELETE文の基本構文

// DELETE文は、既にテーブルに存在する行を削除するための命令です。
既存のデータに対する操作という点では、これまでに登場したSELECT文UPDATE文と同じ
ですが、行をまるごと削除する機能であるため、特定の列だけを指定するようなことは
できません。


// DELETE文の基本構文
DELETE // 削除しなさい
  FROM テーブル名
  (WHERE 修飾)

リスト 2-10 DELETE分の例
DELETE FROM 家計簿

// すべての行が削除対象になる

// WHEREなしのDELETE文は「データを全削除する：指示にほかならない

// WHEREのないDELETE命令は全件削除

■INSERT文-データの追加

// INSERT文の基本構文

// INSERT文はテーブルにデータを追加するための命令です。

■INSERT文の基本構文

INSERT INTO テーブル名 // このテーブルに
(列名1,列名2,列名3...) // この列に
VALUE(値1,値2,値3) // このデータを


// 1行目のINSERTには、INTOのキーワードを続けてデータを追加するテーブル名を記述

// 2行目はすべての列に追加する場合は省略可能

// 3行目はVALUE句といい、二行目に記述した列名に対応するテーブルを指定する必要
がある。


■ リスト 2-11 複数の列に追加する INSERT文
INSERT INTO 家計簿(費目, 日付, 出金額)
VALUES ('通信費', '2013-02-20', 6200)

// INSERT文の実行後に、テーブルを全件検索すると、次の実行表が得られる


リスト 2-11 実行後にテーブルを全件検索した結果表
2013-02-20 通信費  ...... ...... 6200

リスト 2-12 全列に追加するINSERT文
INSERT INTO 家計簿
VALUES('2013-02-20', '通信費', '携帯電話料金', 0, 6200)


■ 4つのSQLを学ぶコツ

// 4大命令を振り返って

// 本がないと混乱してしまうかもしれない

// FROM、WHERE、AS、INTO、VALUES

// 「四大命令をスッキリ学ぶコツ」

■ 四大命令をスッキリ学ぶ三つ残る
(1) 4大命令の構造と修飾語の全体像をしっかり把握する
(2) 4大命令の2通りの分類方法を理解する
(3) 4大命令に共通するテーブル指定を先に書く

■ 4大命令の2通りの分類を理解する

// 4大命令をいくつかの観点で分類すると、いろんな法則が見えてくる

// 4大命令の分類方法(1) 検索系と更新系
検索系:SELECT
更新系:UPDATE、DELETE、INSERT

// SQLの実行結果は表の形になる。実行結果は基本的に「成功か失敗か」であり、表な
どが返されることはない。

// ORDER BYで表の行を並び替える

// 4大命令の分類方法(2) 既存系と新規系

既存系:SELECT、UPDATE、DELETE
新規系:INSERT

// 対象行の絞り込み

■ テーブル指定を先に記述する

// WHERE句より前の部分について、より踏み込んで整理してみましょう。四つの命令に
共通するルールに気づく

// 4大命令の全てに共通すること
// 処理対象とするテーブル名を必ず指定する必要がある


// スッキリ書ける SQL
(1)まず、命令文(SELECTやINSET)を記述する
(2)次に、テーブル指定の部分を記述する
(3)テーブル指定より後ろの部分を記述する
(4)テーブル指定より前の部分を記述する(SELECT文のみ)


// 練習量 SQLを書いてみる

■ この章で学習した内容

// SQL基本ルール
・記述の途中で改行しても良い
・予約語は大文字、小文字が区別されない。また、列名などに利用できない。
・文中にコメントを記述することができる。

// データ型とリテラル
・SQL文の中に直接記述されるデータのことをリテラルという
・数値、文字列、日付など、データ型の種類に応じてリテラルの記述方法は異なる
・テーブルの各列にはデータ型が指定される
・テーブル指定より前の部分を記述する(SELECT文のみ)

// 2章のまとめ
// SQLの基本ルール
・記述の途中で開業しても良い
・予約語は大文字、小文字が区別されない。また列名などに利用できない。
・文中にコメントを記述する事ができる

// データ型とリテラル
・SQL文の中に直接記述されるデータのことをリテラルという
・数値、文字列、日付など、データの種類に応じてリテラルの記述方法は異なる
・テーブルの各列んはデータ型が指定されている
・列に指定された種類のデータのみ、その列に格納することができる

// SQLの体系
・SELECT、UPDATE、DELETE、INSERTの4つの命令を利用する
・命令形をどのように実行するかを支持する装飾が豊富に用意されており、
組み合わせることによって多様な命令を実現できる
・4つの命令は、操作内容から見た検索系と更新系、対象とするデータから見た既存系
と新規系に分類

// 4大命令をスッキリ学ぶコツ
・四大命令の構造と修飾語の全体像をしっかり把握する
・四大命令の二通りの分類方法を理解する
・四大命令に共通するテーブル指定を先に書く

まとめ
// 家計簿の内容を全て表示
SELECT* FROM 家計簿

// 2000円より大きな金額を使った日を知る
SELECT 日付 FROM 家計簿 WHERE 出金額 > 2000

// 3月1日 1800円で映画を見た記録を追加
INSERT INTO 家計簿
  VALUES ('2013-03-01', '娯楽費', '映画を見た' , 0, 1800)
  
// 3月1日の映画は1500円の誤りだったので修正したい
UPDATE 家計簿 SET 出金額 = 1500 WHERE 日付 = '2013-01-01'

// 全データを削除
DELETE FROM 家計簿

■ 練習問題
// 問題 2-1 SQLの予約語を記入
操作 検索,更新,削除,追加
命令 SELECT UPDATE DELETE INSERT
指定 FROM   なし   FROM   INTO
条件 WHERE  WHERE  WHERE

// 問題 2-2
(1) 30000(金額) (2)SQL入門(書籍名) (3)2013-02-20(日付)
(4) 1.41421356(少数) (5) 10時35分(時間) (6) 125,358,854(大きな数) (7)
102-0075(郵便番号)

// 問題 2-3
都道府県テーブル
列名        データ型      備考
コード      CHAR(2)       '01'~'47'の都道府県コード
地域        VARCHAR(10)   '関東'や'九州'など
都道府県名  VARCHAR(10)   '千葉'や'兵庫'など
県庁所在地  VARCHAR(20)   '千葉'や'神戸'など
面積        INTEGER       都道府県の面積(km2)

1.すべての列名を明示的に指定して、すべての行を取得する
2.列名の指定を省略して、1と同様の結果を取得する
3.「地域」 「都道府県名」の列について、「area」、「pref」といいう別名を付けて
すべての行を取得する

// 問題 2-4
都道府県テーブルについて、次のような3つのデータを追加するSQL文をそれぞれ作成し
て実行。2行目の追加に関してはSQL文中に列名を指定しない。空白は指定しない

コード 地域 都道府県名 県庁所在地 面積(km2)
26     近畿 京都                  4613
37     四国 香川       高松       1876
40          福岡       福岡

// 問題 2-5
問題2-4で追加された都道府県テーブル
1行目と3行目の空白部分について、それぞれ適切な値を格納するSQL文を作成。jikkou 
なお、コード26の行の県庁所在地は「京都」、コード40の行の地域は「九州」、
4,976(km2)とします

// 問題 2-6
問題 2-4で追加した1行目を都道府県テーブルから削除するSQL文を作成し、実行してく
ださい。その際、WHERE句にはコード番号を指定してください

■ 練習問題の解答
// 問題 2-1
(A)SELECT (B)UPDATE (C)DELETE (D)INSERT
(E)FROM   (F)FROM   (G)INTO   (H)WHERE

// 問題 2-2
(1)INTEGER型 (2)VARCHAR型 (3)DATE型
(4)DECIMAL型 (5)TIME型 (6)INTEGER型 (7)CHAR型

// 問題 2-3
// 1
SELECT コード, 地域, 都道府県名, 県庁所在地, 面積
FROM   都道府県

// 2
SELECT * 
FROM 都道府県

// 3
SELECT 地域 AS area,都道府県名 AS pref FROM 都道府県

// 問題 2-4
・コード26の行を追加する
INSERT INTO 都道府県(コード, 地域, 都道府県名, 面積)
VALUES('26, '近畿', '京都', 4613 )

・コード37の行を追加する
INSERT INTO 都道府県
VALUES('37', '四国', '香川', '高松', 1876 )

・コード40の行を追加する
INSERT INTO 都道府県（コード, 都道府県名, 県庁所在地)
VALUS('40', '福岡', '福岡')

// 問題 2-5
・1行目の空白に値を格納する
UPDATE 都道府県 SET 県庁所在地 = '京都'
WHERE コード = '26'

・3行目の空白に値を格納する
UPDATE 都道府県 SET 地域 = '九州', 面積 = 4976
WHERE コード = '40'

// 問題 2-6
DELETE FROM 都道府県 WHERE コード = '26'


■ 操作する行の絞り込み

3.1 WHERE句による絞り込み

