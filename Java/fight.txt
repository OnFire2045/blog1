/* FightingGame(ProtoType)*/


// Rogue Like Game. コマンド4択を使ったゲーム(仮)
// 戦闘可能。５戦で終了する。時間計算とモンスター選択と戦闘システムが完成
// 難易度：ベリーハード 骸袋、呪術は2戦目から使用可能。
import java.util.Scanner;
import java.util.Random;

class Sample00 {
	public static void main(String[] args) {
	Scanner scanner = new Scanner(System.in);
	// インスタンスを作成
	Fight fight = new Fight(); 
	Time time = new Time();
	Fighting fighting = new Fighting(fight);
	Fighting fighting1 = new Fighting(fight);
	
	System.out.println("あなたは暗闇の中で目を覚ました");
	time.clock();
	System.out.println("時刻みの烙印が目覚めとともに金切り声を上げる");
	fight.uname();
	System.out.println("アナタは災イヲ呼ビ寄セル旅人"+ "\""+  fight.getUname() + "\"デス」");
	System.out.println("時刻みの烙印が小さな金切り声を上げた");
	System.out.println("暗闇の渦より生まれし混沌の使途があなたを襲う");
	System.out.println(fight.getName() +"が闇の中から姿を現した:");
	fighting.battle(fight);
	
	fighting.create(fight);
	System.out.println("時刻みの烙印が再び小さな金切り声を上げた");
	System.out.println("暗闇の渦より生まれし混沌の使途があなたを襲う");
	System.out.println(fight.getName() +"が闇の中から姿を現した:");
	fighting.battle(fight);
	
	fighting.create(fight);
	System.out.println("時刻みの烙印が再び小さな金切り声を上げた");
	System.out.println("暗闇の渦より生まれし混沌の使途があなたを襲う");
	System.out.println(fight.getName() +"が闇の中から姿を現した:");
	fighting.battle(fight);
	
	fighting.create(fight);
	System.out.println("時刻みの烙印が再び小さな金切り声を上げた");
	System.out.println("暗闇の渦より生まれし混沌の使途があなたを襲う");
	System.out.println(fight.getName() +"が闇の中から姿を現した:");
	fighting.battle(fight);

	fighting.create(fight);
	System.out.println("時刻みの烙印が再び小さな金切り声を上げた");
	System.out.println("暗闇の渦より生まれし混沌の使途があなたを襲う");
	System.out.println(fight.getName() +"が闇の中から姿を現した:");
	fighting.battle(fight);
	
	System.out.println("どこからともなく枯れた苦痛にゆがんだ声が聞こえる...");
	System.out.println("目の前に大きな石造の形をした肉の塊が現れた...");
	System.out.println("to be continued...");
	
	}
}
// 名前を登録するクラス
class Fight {
	Scanner scanner = new Scanner(System.in);
	private String name;
	private String uname;
	// constracter
	Fight() {
	System.out.println("どれほどの長い時間眠っていたのだろうか...");
	System.out.print("何時間眠っていたんだ?:");
	}

	// setter
	public void setName(String name) {
	this.name = name;
	}

	// getter
	public String getName(){
	return this.name;
	}

	// uname
	public void uname(){
	System.out.print("俺の名前は......");
	uname = scanner.next();
	}
	
	// setter
	public void setUname(String uname) {
	this.uname = uname;
	}

	// getter
	public String getUname(){
	return this.uname;
	}

}

// 時間についての計算をするクラス
class Time{
	Scanner scanner = new Scanner(System.in);
	int timer;

	// コンストラクタ
	Time(){
	// 時間を受け取る。例外処理付き
		try{
		timer = scanner.nextInt();
		}
		catch(Exception e){
			System.out.println("その入力は無効だ。最初からやり直せ");
			System.exit(0);
		}
	}
	// 条件分岐により入力された時間から日数と時間を計算するメソッド
	public void clock(){
	    if(timer > 24){
	    int days = timer / 24;
	    int hours = timer % 24;
	    System.out.println("「アナタガ転生スルマデ二カカッタ時間は"+ days + "日と"+ hours  + "時間デス」" );
	    } else {
            int hours = timer % 24;
	    int days = timer / 24;
	    System.out.println("「アナタガ転生スルマデ二カカッタ時間は" + hours  + "時間デス」" );
	    }	
	
	}
}

// モンスターをランダムで選択し、戦うクラス
class Fighting {
	Random random = new Random();
	Scanner scanner = new Scanner(System.in);
	private int monster;
	private int hp = 50;
	private int mp = 0;
	private int mhp = 0;
	private int mukuro = 0;
	private int count = 0;
	private int power = 5;
	private int powerM = 0;
	// コンストラクタ
	Fighting(Fight fight){
	// ランダムでモンスターを選択するために乱数を取得
	monster = random.nextInt(4);
	// セッターを使用して名前をセット
	switch(monster){
	   case 0:
	    fight.setName("泥人形シェム・バ");
	    mhp = 20;
	    powerM = 5;
	    break;
	   
	    case 1:
	    fight.setName("腐肉食らいアンディッド");
	    mhp = 30;
	    powerM = 7;
	    break;

	    case 2:
	    fight.setName("死肉漁りのスライム");
	    mhp = 40;
	    powerM = 8;
	    break;

	    case 3:
	    fight.setName("変異した肉食ワーム");
	    mhp = 50;
	    powerM = 15;
	    break;
	    
	    default:
	    fight.setName("突然変異体ヌル");;
	    break;
	    }
	}
	// クリエイトメソッド ランダムモンスター
	public void create(Fight fight){
	// ランダムでモンスターを選択するために乱数を取得
	monster = random.nextInt(4);
	// セッターを使用して名前をセット
	switch(monster){
	    case 0:
	    fight.setName("泥人形シェム・バ");
	    mhp = 20;
	    powerM = 8;
	    break;
	   
	    case 1:
	    fight.setName("腐肉食らいアンディッド");
	    mhp = 30;
	    powerM = 10;
	    break;

	    case 2:
	    fight.setName("死肉漁りのスライム");
	    mhp = 40;
	    powerM = 15;
	    break;

	    case 3:
	    fight.setName("変異した肉食ワーム");
	    mhp = 50;
	    powerM = 20;
	    break;
	    
	    default:
	    fight.setName("突然変異体ヌル");;
	    break;
	    }
	}
	// getter Monster select
	public int getMonster(){
	return this.monster;
	}
	// 戦闘システム
	public void battle(Fight fight){
	int select = 0;
	int damage = 0;
	int damage2 = 0;
	int damage3 = 0;
	int run = 0;
	// 条件分岐による戦闘。敵か味方のHPが0になるまでループ
		while(hp > 0 && mhp > 0){
		System.out.println("生命力" +hp);
		System.out.println(fight.getName()+ "\t"+ "生命力:" + mhp);
		System.out.println("行動を選択してください:");
		System.out.println("1:ぶん殴る 2:骸袋 3:呪術 4:避ける");

		// 例外処理
			try{
			select = scanner.nextInt();
			}catch(Exception e){
			System.out.println("その入力は無効だ。やり直せ");
			break;
			}
			// switchによる条件分岐
				switch(select){
				case 1:
				
				System.out.println(select +":ぶん殴る");
				damage = random.nextInt(20)+ power;
				System.out.println(fight.getName()+"に"+ damage +"のダメージ");
				mhp -= damage;
				
				damage2 = random.nextInt(20)+ powerM;
				System.out.println(fight.getUname()+"に"+ damage2 +"のダメージ");
				hp -= damage2;
				break;
				case 2:
				if(mukuro < 1){
				System.out.println("骸袋は空だ");
				} else {
				System.out.println("骸袋に触れると、漆黒の闇が身体を包んだ");
				hp += 25;
				System.out.println("傷が塞がっていく......");

				mukuro -= 1;
				}
				break;
				case 3:
				if(mp < 1) {
				System.out.println("魔力が足りない......");
				} else{
				System.out.println("漆黒の炎が腕を包む");
				System.out.println(fight.getName()+ "は炎に包まれた");
				damage3 = random.nextInt(30)+20;
				System.out.println(fight.getName()+"に"+ damage3 +"のダメージ");
				mhp -= damage3;
				mp -= 1;
				}
				break;
				case 4:
				run = random.nextInt(2);
				if(run == 1){
				System.out.println(fight.getName()+ "の攻撃を躱し、打撃を与えた");
				damage = random.nextInt(30)+ power;
				System.out.println(fight.getName()+"に"+ damage +"のダメージ");
				mhp -= damage;
				}else {
				System.out.println("避けられない。背後からの不意打ちを受けた");
				damage2 = random.nextInt(30)+ powerM;
				System.out.println(fight.getUname()+"に"+ damage2 +"のダメージ");
				hp -= damage2;

				}
				break;
				default:
				System.out.println("その入力は無効だ。やり直せ");
				break;
			        }
		      }
		// ループを抜けた後の処理
		if(mhp < 0){
		System.out.println(fight.getName()+"を倒した");
		count += 1;
		power += 2;
		System.out.println("ギギギ...タオシタマモノ..." + count + "ヒキ");
		System.out.println("返り血を浴びた骸袋の口元が動き、歪み震えた低い声が響いた");		
		mukuro += 1; // 回復アイテムを1つ獲得
		    if(count % 2 == 0){
		    System.out.println("呪術の手袋が小さく光った");
		    mp +=1; // 2回敵を倒すたびに魔法を1回使えるMPを獲得
		    } else {
		    }
		} else {
		System.out.println("あなたは闇に呑まれた");
		System.exit(0);
		}
	}
} 
