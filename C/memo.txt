// 苦しんで覚えるC言語 3章 画面への表示

# include<stdio.h>
// 
int main(void)
{
    printf("Hello\nworld\n"); // 文字出力:Hello,world
    printf("Windows\tMicrosoft\n");
    
    printf("OS X\tapple\n"); // 行頭揃え:|t(エスケープシーケンス)
    printf("The pen is mighter\nthan the sword\n");
    
    printf("Time is money\n"); // 改行:\n(エスケープシーケンス)
    
    printf("C language\n");
    printf("\\n is NewLine Symbol "); // 文字に付属する特殊な意味を無効://n(エスケープ)
    printf("\\t is Tab Symbol\n"); // 文字に付属する特殊な意味を無効:\\t(エスケープ)

    printf("Intel \t:Core i7\n");
    printf("AMD \t:Phenom Ⅱ\n"); // 改行と行頭揃え
 
     
     // ""で囲まれた文字列を文字列リテラルという
     // C言語は全角文字も表示できる。基本は半角
     // ~ P.72 4章 数値の表示と計算
 
    printf("%d",100); // %d指定子。数値を数字に変換する
    printf("円\n");
    printf("%d円\n",100); //%d 指定子は文字列に自由に埋め込むことができる
    printf("%d+",100);
    printf("%d=",200);
    printf("%d\n",300);
    printf("%d+%d=%d\n",100,200,300); // %d指定子を復数使う
    printf("%d\n",100+200); // 計算と結果の表示
 

    // 数字の計算
    // %d指定子は整数値を数字に変換する
    printf("%d\n",10 + 3);
    printf("%d\n",10 - 3);
    printf("%d\n",10 * 3);
    printf("%d\n",10 / 3);
    printf("%d\n",10 % 3);
    printf("%d\n",(1 + 100) * 100 / 2 );
    
    
    // %f指定子は実数値を数字に変換する
    printf("%f\n",10.0 + 3.0);
    printf("%f\n",10.0 - 3.0);
    printf("%f\n",10.0 * 3.0);
    printf("%f\n",10.0 / 3.0);
    
    
    // 0xを付けると16進数　0を付けると8進数
    printf("%d\n", 0x5D);
    printf("%d\n", 023);
    printf("%d\n", 0x5D + 023 * 3);
 
    // 式と商を表示
    printf("%d / %d = %d...%d\n",40,13,40 / 13,40 % 13);
    
    // ~p.94 5章 数値の記憶と計算
    
/*   変数とは数値を記憶するメモリに名前をつけて管理する方法。
     メモリとは横一列に並べられたロッカーのような構造
     番号が隅からつけられており、宣言(名前をつける)する
*/
    
    // 変数宣言 宣言は関数の先頭でしか行えない(C++は可能)
    int value;
    int value1;
    int left;
    int right;
    double left1,right1;
    int a = 10000, b = 500 , c = 3;
    double pi = 3.14159;
    int x,y;
    x = 10;
    y = x * 10 + 20;
    left1 = 10;
    right1 = 3;
    int juice,milk,money,payment,change;
    double tax;
    value = 10; // 代入
    value1 = 10+30;
    left = 10;
    right = 3;
    value += 30; // +=演算子 value = value + 30の意
    
    juice = 198;
    milk = 138;
    money = 1000;
    tax = 1.05;
    // doubleで四則演算
    printf("%f\n", left1 + right1);
    printf("%f\n", left1 - right1);
    printf("%f\n", left1 * right1);
    printf("%f\n", left1 / right1);
    printf("%d\n",value); // 表示
    printf("%d\n",value1);
    printf("%d\n", left + right);
    printf("%d\n", left - right);
    printf("%d\n", left * right);
    printf("%d\n", left / right);
    printf("%d\n", left % right); //　変数で四則演算
    value++; // インクリメント 1増やす
    printf("%d\n",value);
    value--; // デクリメント 1減らす
    printf("%d\n",value);
    printf("%f\n",1.03 * 9); // 整数実数混合計算
    printf("%d\n",(int)(1.05 * 360)); // キャスト変換
    // 整数の桁揃え %桁数d
    printf("Aは%5dです。\n",a);
    printf("Bは%5dです。\n",b);
    printf("Cは%5dです。\n",c);
    // 空白を0で埋める整数の桁揃え %0桁数d
    printf("Aは%05dです。\n",a);
    printf("Bは%05dです。\n",b);
    printf("Cは%05dです。\n",c);
    // 実数の桁揃え　%全体桁数.少数点桁数
    printf("%6.2f\n",pi);
    printf("123456\n");
    // 整数の桁揃え %桁数d
    printf("%5d\n",y);
    // 商品購入計算
    payment = (int)((juice + milk * 2) * tax);
    change = money - payment;
    printf("%d円\n",change);
    return 0;
}
// ~ p.118
// 実数 = 浮動少数
// 整数の割り算は切り捨てられる（割られる値より大きくなるため）


// p120 ~ 6章 入力用の関数
// 入力された文字を代入するscanf関数:scanf("入力変換指定子",&変数名);

#include <stdio.h>

int main(void)
{
    int min,max,sum;
    int price;
    int num1,num2;
    int data;
    double data2;
    printf("Enter number:");
    scanf("%d",&data); // 入力部分
    printf("%d\n",data); // 入力数字の表示
    printf("Enter number:");
    scanf("%lf",&data2); // %lf指定子で実数を表示
    printf("%f\n",data2);

    printf("Enter number num1 num2:");
    scanf("%d%d",&num1,&num2); //2つ数値を入力
    printf("%d,%d\n",num1,num2);
 
    printf("Enter two number num1,num2:");
    scanf("%d,%d",&num1,&num2); // ,で区切って入力指定
    printf("%d,%d\n",num1,num2);
 
    // 入力部分
    printf("最小値と最大値を,で区切って入力してください:");
    scanf("%d,%d",&min,&max);
    // 計算部分(シグマ)
    sum = (min + max) * (max - min + 1) / 2;
    // 表示部分
    printf("%d~%dの合計は%dです。\n",min,max,sum);

 
    // 定価を入力すると、1割引、3割引、5割引、8割引の値段を、一覧表示するプログラムを作成せよ
    printf("定価を入力してください:");
    scanf("%d",&price);
    printf("1割引:%d\n",(int)(price * 0.9));
    printf("3割引:%d\n",(int)(price * 0.7));
    printf("5割引:%d\n",(int)(price * 0.5));
    printf("8割引:%d\n",(int)(price * 0.2));
    
    return 0;
}


// ~p132 7章 比較と判断
// if(条件式)文; 条件判断 Cは0を偽。それ以外を真とする

#include<stdio.h>

int main(void)
{
    int suuti = 10; // 宣言と同時に代入。初期化と呼ぶ
    int suuti1;
    int suuti2;
    int suuti3;
    int suuti4;
    if(suuti) printf("%d\n",suuti); // ifの中の数値が0以外の真偽値
    
    printf("Enter number:");
    scanf("%d",&suuti1);
    if(suuti1 - 10)printf("入力値は10ではありません\n");
    if(suuti1 == 10)printf("入力値は10です\n");

    // 等値演算子 == 2つの値は等しい != 2つの値は等しくない
    printf("Enter number:");
    scanf("%d",&suuti2);
    if(suuti2 == 10)printf("入力値は10です\n");
    if(suuti2 != 10)printf("入力値は10ではありません\n");
    
    /* 比較演算子 answer = value1 == value2
       value1と2が等しければanswerに1。違えば0が代入される
       関係演算子と真になる条件
       "<"左の値が右より小さい ">"左の値が右より大きい "<="左の値が右以下 ">="左の値が右以上
    */
    printf("Enter number!:");
    scanf("%d",&suuti3);
    if(suuti3 == 10)printf("入力値は10です\n");
    if(suuti3 > 10)printf("入力値は10より大きいです\n");
    if(suuti3 < 10)printf("入力値は10より小さいです\n");
    
    /* 論理演算子
    "&&" 両方で真 かつ "||" 片方でも真 または "!" 条件が偽 否
     */
    printf("Enter number!!:");
    scanf("%d",&suuti4);
    if(suuti4 >= 8 && suuti4 <= 12) printf("8から12の間です\n");
    if(!(suuti4 >=8 && suuti4 <= 12)) printf("8から12の間ではありません\n");
    return 0;
}
    // 復数の処理
    // #include<stdio.h>
    
    // 複数の処理の実行

     int main(void)
     {
     int value,remainder;    int score;
     printf("点数を入力してください");
     scanf("%d",&score);
     if(score > 100) printf("入力が100より大きいので修正します。¥n");
     if(score > 100) score = 100;
     printf("点数は%d点です。¥n,score");
     
     // ブロック文を使った処理
     int score;
     printf("点数を入力してください");
     scanf("%d",&score);
     if(score > 100) {
     printf("入力が100より大きいので修正します¥n");
     score = 100;
     }
     print("点数は%d点です。¥n",score);
     return 0;
     
     // 整数か奇数かを表示するプログラム。o(odd)奇数。e(even)偶数
     
     scanf("%d",&value);
     
     remainder = value % 2;
     
     
     if(remainder == 0)printf("E");
     if(remainder == 1)printf("0");
     
     printf("¥n");
     return 0;
     }
    // 西暦年を入力すると、その年にオリンピックが開催されるかどうかを表示するプログラムを作成せよ
// 
    #include<stdio.h>
    int main(void)
    {
        int year;
        
        printf("西暦年を入力してください:");
        scanf("%d",&year);
        
        if(year % 4 == 0)printf("夏季五輪¥n"); // 夏季五輪は% 4
        if(year % 2 == 0 && year % 4 != 0)printf("冬季五輪");
        // 冬季五輪は% 2
        if(year % 2 != 0)printf("五輪なし¥n"); // %2 != 0
        return 0;
    }


//　p150~ 8章　場合分け処理を使う


#include <stdio.h>
int main(void)
{
    // elseを使った条件分岐
    int suuti;
    printf("enter number:");
    scanf("%d",&suuti);
    if(suuti == 10) {
        printf("入力値は10です。\n");
    } else {
        printf("入力値は10ではありません。\n");
 return 0;
 }
 }

// 3択の判断を行う(動物園の入場料と年齢の関係)
#include<stdio.h>
int main(void)
{
    int age;
    printf("年齢:");
    scanf("%d",&age);

    // ここから無駄のある記述
    if(age <= 3)printf("幼児:無料\n");
    if(age >= 4 && age <= 12)printf("子供:250円\n");
    if(age >= 13)printf("大人:400円\n");

    //修正した記述
    if(age <= 3) {
        printf("幼児:無料\n");
    } else if(age <= 12) {
        printf("子供:250円\n");
    } else {
        printf("大人:400円\n");
    }
    
    return 0;
    
}

#include<stdio.h>
int main(void)
{
    int no;
    printf("enter number:");
        scanf("%d",&no);
    if(no == 1) {
        printf("野比のび太");
    } else if(no == 2) {
        printf("源静香");
    } else if(no == 3) {
        printf("剛田武");
    }else if(no == 4) {
        printf("骨川スネ夫\n");
    } else {
        printf("そんな番号の人はいない");
    }
}

// switch ~ case 美しい記述
#include<stdio.h>
int main(void)
{
    int no;
    printf("enter number:");
    scanf("%d",&no);
    switch(no) {
        case 1:
            printf("野比のび太\n");
            printf("男性");
            break;
        case 2:
            printf("源静香\n");
            printf("女性");
            break;
        case 3:
            printf("剛田武\n");
            printf("男性");
            break;
        case 4:
            printf("骨川スネ夫\n");
            printf("男性");
            break;
        default:
 
 printf("そんな番号の人はいない\n");
            break;
    }
    return 0;
}
// case文をまとめる
#include<stdio.h>
int main(void)
{
    int no;
    printf("enter number:");
    scanf("%d",&no);
    switch(no) {
        case 1:
        case 3:
        case 4:
             printf("男性");
            break;
        case 2:
            printf("女性");
            break;
        default:
            printf("そんな番号の人はいない\n");
            break;
    }
    return 0;
}
 */
 
// caseは判断力が弱い。整数値しか使えない。

//  プログラム書き取り　月を入力すると陰暦を表示 switch文
#include<stdio.h>
int main(void)
{
    int month;
    
    printf("月を整数で入力してください:");
    scanf("%d",&month);
    
    switch(month) {
        case 1:
            printf("陸月");
            break;
        case 2:
            printf("如月");
            break;
        case 3:
            printf("弥生");
            break;
        case 4:
            printf("卯月");
            break;
        case 5:
            printf("皐月");
            break;
        case 6:
            printf("水無月");
            break;
        case 7:
            printf("文月");
            break;
        case 8:
            printf("葉月");
            break;
        case 9:
            printf("長月");
            break;
        case 10:
            printf("神無月");
            break;
        case 11:
            printf("霜月");
            break;
        case 12:
            printf("師走");
            break;
        default:
            printf("1から12の月を入力してください");
            break;
    }
    return 0;
}

// switch文はcase文にジャンプする機能しか持たないためbreakが必須

// p170~ 9章　回数が決まっている繰り返し

  #include<stdio.h>
int main(void){
    int i;
    for(i = 1; i <= 10; i++) {
        printf("メッセージ\n");
    }
}
// カウント変数
#include<stdio.h>
int main(void)
{
    int i;
    for(i = 1; i < 10; i++){
        printf("%0d回目\n",i);
    }
    return 0;
}


/*
 ループ動作の仕組み
for(初期化; 条件式; 更新) {
# 繰り返す文;
}
*/

#include<stdio.h>
int main(void)
{
    int i;
    for(i = 1; i <= 10; i++){
        printf("メッセージ");
    }
    return 0;
}

/*
 ループの開始時点でiは1となり、条件式の比較によりi <= 10の結果は真となる。
その結果ループの実行が続く。次に繰り返す文としてprintf分が実行される。i++でiの値は1増加する。
iが11になった時、偽となりループから抜け出す。
 */


// 無限ループ
/*
#include<stdio.h>

int main(void)
{
    for(;;){
        printf("メッセージ");
    }
    return 0;
}
// 実行すると、無限ループする。
*/

// 強制脱出 break文によってfor文を強制終了させる
#include<stdio.h>
int main(void)
{
    int i;
    for(i = 1; i <= 10; i++){
        printf("%d\n",i);
        if(i == 3) break; //ループを終了させる
    }
    return 0;
}
// 3回目で終了する

// for文を使用して掛け算の九九を表示するプログラムを作成せよ
#include<stdio.h>
int main(void)
{
    int x,y;
    
    for(x = 1; x<= 9;x++){
        for(y = 1; y <= 9; y++){
            printf(" %2d ",x * y);
        }
        printf("\n");
    }
    return 0;
}

// １０章 P.191~ 回数のわからない繰り返し

/* 無駄のある書き方
#include<stdio.h>

int main(void)
{
    int r;
    double s;
    printf("半径?:");
    scanf("%d",&r);
    while(r < 0) {
        printf("半径?:");
        scanf("%d",&r);
    }
    
    s = r * r * 3.14;
    printf("面積は%fです。\n",s);
    
    return 0;
}
*/

// do whileを使って無駄をなくす

#include<stdio.h>

int main(void)
{
    int r;
    double s;
    
    do{
        printf("半径?:");
        scanf("%d",&r);
    } while(r < 0);
    s=r*r*3.14;
    printf("面積は％%fです。\n",s);
    return 0;
}


// whileは先判定。do whileは後判定

// テストの点数を入力(0から100まで)するプログラム

#include<stdio.h>

int main(void)
{
    
    int score;
    
    do {
        printf("点数を入力してください");
        scanf("%d",&score);
    } while (score < 0 || score > 100);
    printf("入力された点数 %d\n",score);
    return 0;
}
// do whileは後判定のため必ず一回は実行される（チェックに向いている）


// P.198~ 11章　関数の作り方

// 関数としての再利用を部品化と呼ぶ
/*
#include<stdio.h>

int sum(void);
 プロトタイプ宣言
プロトタイプ宣言は関数の形を宣言しておく事で他のすべての
関数からその関数を使えるようにすること。
*/
/*
int main(void)
{
    return 0;
}

int sum(void)
{
    printf("%d\n",(1+100) * 100 / 2);
    return 0;
}
*/

// 自作関数を呼び出す
/*
#include<stdio.h>

int sum(void); // プロトタイプ宣言
 
int main(void)
{
    sum();
    return 0;
}

int sum(void)
{
    printf("%d\n",(1+100) * 100 / 2);
    return 0;
}
*/
// 引数 関数に情報を渡す情報の総称 int sum(int max);
// 入力した数値までの数をすべて足した数を表示 例:50なら1~50
/*
#include<stdio.h>

int sum(int); // プロトタイプ宣言

int main(void)
{
 sum(50); // 50を渡している
    return 0;
}

int sum(int max)
{
    printf("%d\n",(1 + max) * max / 2);
    return 0;
}
*/

// 12章 データ 
// 12章は編集中です......


// P.239 13章 2 復数の変数をまとめて扱う


#include<stdio.h>

int main(void)
{
    int array[100];
    
    array[9] = 100; // 0番からなので9は10番目
    printf("1:%d\n",array[9]);
    array[9]++;
    printf("2:%d\n",array[9]);
    
    return 0;
}


// 配列の使い方

#include<stdio.h>

int main(void)
{
    int array[10] = {42,79,13};
    
    printf("array[0] = %d\n",array[0]);
    printf("array[1] = %d\n",array[1]);
    printf("array[2] = %d\n",array[2]);
    printf("array[3] = %d\n",array[3]);
    printf("array[4] = %d\n",array[4]);
    
    return 0;
}

// 要素数を省略して配列を宣言


#include<stdio.h>

int main(void)
{
    int array[] = {42,79,13}; // 要素数を省略
    
    printf("array[0] = %d\n",array[0]);
    printf("array[1] = %d\n",array[1]);
    printf("array[2] = %d\n",array[2]);
    
    return 0;
    
    // 配列は１つずつ代入する事 array[0] = 42;
    
}


// 全要素の表示

#include<stdio.h>
int main(void)
{
    int array[] = {42,79,13,75,19};
    int i;
    
    for(i = 0; i < 5; i++){
        printf("array[%d] = %d\n",i,array[i]);
    }
    return 0;
}


// 配列の要素番号には変数が使える
// 要素数を求める sizeof演算子
// sizeof(array) / sizeof(array[0])


#include<stdio.h>
int main(void)
{
    int array[] = {42,79,13,75,19};
    int i;
    
    for(i = 0; i < sizeof(array)/ sizeof(array[0]); i++){
        printf("array[%d] = %d¥n",i,array[i]);
    }
    return 0;
}


// 配列のコピー


#include<stdio.h>
int main(void)
{
    int array1[] = {42,79,13,19,41};
    int array2[] = {1,2,3,4,5};
    int i;
    
    for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
        printf("array2[%d] = %d\n",i,array2[i]);
    }

// array1の全要素をarray2にコピー
    for (i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
        array2[i] = array1[i];
    }

    for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
    printf("array2[%d] = %d\n",i,array2[i]);
    }
    return 0;
}


// 結果はarray1の中身がarrray2にコピーされるが、これはmemcpy関数を使うと良い
// #include<string.h>でmemcpy関数は使用可能
// 書式 memcpy(コピー先配列名,コピー元配列名,配列全体のサイズ)


#include<stdio.h>
#include<string.h>

int main(void)
{
    int array1[] = {42,79,13,19,41};
    int array2[] = {1,2,3,4,5};
    int i;
    
   for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
   printf("array2[%d] = %d\n",i,array2[i]);
    // array1の要素をarray2にコピー
   }
    memcpy(array2,array1,sizeof(array1));
    
    for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
        printf("array2[%d] = %d\n",i,array2[i]);
    }
    return 0;
}




#include<stdio.h>
#include<string.h>

int main(void)
{
    int array1[] = {42,79,13,19,41};
    int array2[] = {1,2,3,4,5};
    int i;
    
   for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
   printf("array2[%d] = %d\n",i,array2[i]);
    // array1の要素をarray2にコピー
   }
    memcpy(array2,array1,sizeof(array1));
    
    for(i = 0; i < sizeof(array2) / sizeof(array2[0]); i++){
        printf("array2[%d] = %d\n",i,array2[i]);
    }
    return 0;
}


// 基礎知識
// 1.同じ型の変数を取り扱う方法を配列という

// 2.平均の計算を行うプログラム

#include<stdio.h>
int main(void)
{
    int data[] = {79,42,39,79,13,75,19};
    int i,sum = 0,avg;
    
    for(i = 0; i < sizeof(data) / sizeof(data[0]); i++){
        sum += data[i];
    }
    avg = sum / sizeof(data) / sizeof(data[0]);
            printf("%d\n",avg);
            return 0;
    }


// 3.数字の合計を表示するプログラム

#include<stdio.h>

int main(void)
{
    int array[] = {42,79,13,65,19};
    int i,sum = 0;
    
    for(i = 5-1; i >= 0; i--) {
        sum += array[i];
        printf("%d:",array[i]);
// for文を逆順に回している
    }
    printf("sum = %d\n",sum);
    return 0;
    }



// 4.入力された１０個の数値を最後から表示するプログラム

 #include<stdio.h>

int main(void)
{
    int data[10];
    int i;
    
    for(i = 0; i < 10; i++){
        printf("%d 番目の数値を入力してください:",i);
        scanf("%d",&data[i]);
    }

    for(i = 9; i >= 0; i--){
        printf("%d",data[i]);
    }
    printf("\n");
    
    return 0;
    }

// 以下の記述でも可能
// for(i = 0; i < 10; i++){
// printf("%d",data[9 - i];
// }



// ｈ5.配列の利点は番号を変数で指定することにより大量の変数をまとめて扱える事


